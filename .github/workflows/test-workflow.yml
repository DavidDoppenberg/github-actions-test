# Eerste actie: kijk naar lijst van alle path available dictories + files
# Configuratie van jobs // github actions environment variables (niet allemaal encrypted)
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - id: dotenv
        name: Dotenv Action
        uses: falti/dotenv-action@v0.2.5
        with:
          path: .env.dev
          log-variables: true

      - name: List all current containers and images
        run: |
          docker container ls -a 
          docker images -a 

      # TODO: this action fails if no images where found or if it cannot remove a non existing image
      - name: Remove old images
        run: docker rmi $(docker images --format "{{.Repository}}:{{.Tag}}"|findstr "davidtest") 
 
      - name: Build docker image
        run: docker build -t davidtest:${{github.sha}} .

      - name: Kill and remove old docker containers
        run: |
          docker ps -q -a --filter "status=running" --filter "ancestor=davidtest" | ForEach-Object { docker kill $_ }
          docker ps -q -a --filter "status=exited" --filter "ancestor=davidtest" | ForEach-Object { docker rm $_ }

      - name: Run docker container
        run: docker container run davidtest:${{github.sha}} python app.py

      - name: List all current containers and images
        run: |
          docker container ls -a 
          docker images -a 
      
        # Runs a set of commands using the runners shell
      - name: Run a script that uses environment variables
        run: |
          echo ${{ secrets.SECRET_MESSAGE }}
          echo ${{ steps.dotenv.outputs.TEST_VAR }}

