# Eerste actie: kijk naar lijst van alle path available dictories + files
# Configuratie van jobs // github actions environment variables (niet allemaal encrypted)
# This is a basic workflow to help you get started with Actions


# Kill + remove container => remove images => build image => run container

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Configuration of the job; these variables are also present in DockerEnvList
    # Secrets are configured on the github repo
    env:
      TEST_VAR: "test variable"
      SECRET: ${{ secrets.SECRET_MESSAGE }}
      APP_NAME: "davidtest"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Env test
        run: echo env:APP_NAME

      - name: List all current containers and images
        run: |
          echo "List of all docker containers:"
          docker container ls -a 
          echo "List of all docker images:"
          docker images -a 

      # $env:APP_NAME
      - name: Build docker image
        run: docker build -t ${{env.APP_NAME}}:${{github.sha}} .

      # Also filter images on reference to make sure you are only deleting davidtest related images.
      # TODO: find out why the docker ps command fail if no container can be killed/removed
      # TODO: add a name to the docker container => filter on name 
      # TODO: Do not fetch imageID just use image name:tag in before filter
      - name: Remove old docker containers and images
        run: |
          echo "Containers that are removed:"
          docker ps -a --filter "status=running" --format '{{.ID}} {{.Image}}' | findstr ${{env.APP_NAME}} | ForEach-Object { docker kill $_.split(" ")[0] }
          docker ps -a --filter "status=exited" --format '{{.ID}} {{.Image}}' | findstr ${{env.APP_NAME}} | ForEach-Object { docker rm $_.split(" ")[0] }
          $imageID = docker images -q -a --filter "reference=${{env.APP_NAME}}:${{github.sha}}"
          echo "Current image:"
          echo $imageID
          echo "Images that are going to be removed:"
          docker images -a --filter "before=${imageID}" --filter "reference=${{env.APP_NAME}}:*"
          docker images -q -a --filter "before=${imageID}" --filter "reference=${{env.APP_NAME}}:*" | ForEach-Object { docker rmi $_ }
 
      # Add name to docker container to be able to filter on it
      # .env => DockerEnvList (verzin maar wat)
      - name: Run docker container
        run: docker container run --env-file .env --name ${{env.APP_NAME}} ${{env.APP_NAME}}:${{github.sha}} python app.py

      - name: Check connection
        run: |
          echo "Check if website is reachable:"
          $response = curl https://www.google.com
          echo $response.statusCode
          echo "Check content markdown file:"
          Get-Content README.md

      - name: List all current containers and images
        run: |
          echo "List of all docker containers:"
          docker container ls -a 
          echo "List of all docker images:"
          docker images -a 
